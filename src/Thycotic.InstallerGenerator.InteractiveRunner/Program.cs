using System;
using System.IO;
using Thycotic.InstallerGenerator.MSI.WiX;

namespace Thycotic.InstallerGenerator.InteractiveRunner
{
    class Program
    {
        private static void Main(string[] args)
        {
            try
            {
                const string someSecretServerArbitraryPathForBits =
                       @"M:\development\repos\distributedengine\src\Thycotic.MemoryMq.Pipeline.Service\bin\Release";
                const string currentSnapshottedVersion = "5.0.0.0";

                const string someSecretServerArbitraryPathForWixRecipe =
                    @"M:\development\repos\distributedengine\src\Thycotic.MemoryMq.Pipeline.Service.Wix";

                 var artifactName =
                    string.Format("Thycotic.MemoryMq.Pipeline.Service.{0}.msi", currentSnapshottedVersion);

                var steps = new WiXMsiGeneratorSteps
                {
                    RecipePath = someSecretServerArbitraryPathForWixRecipe,
                    SourcePath = someSecretServerArbitraryPathForBits,
                    ArtifactName = artifactName,

                    Substeps = new WiXMsiGeneratorSubsteps
                    {

                        Heat = string.Format(@"
dir {0}
-nologo
-o output\Autogenerated.wxs 
-ag 
-sfrags 
-suid 
-cg main_component_group 
-t add_service_install.xsl 
-sreg 
-scom 
-srd 
-template fragment 
-dr INSTALLLOCATION", someSecretServerArbitraryPathForBits),
                        Candle = string.Format(@"
-nologo 
-ext WixUtilExtension 
-dInstallerVersion={0} 
-out output\
output\AutoGenerated.wxs Product.wxs", currentSnapshottedVersion),
                        Light = string.Format(@"
-nologo
-b {0}
-ext WixUIExtension 
-ext WixUtilExtension 
-out Thycotic.MemoryMq.Pipeline.Service.{1}.msi
output\AutoGenerated.wixobj output\Product.wixobj", someSecretServerArbitraryPathForBits, currentSnapshottedVersion)
                    }
                };


                var wrapper = new InstallerGeneratorWrapper<WiXMsiGeneratorSteps>();
                
                var path = wrapper.Generate(new WiXMsiGenerator(), steps);
                
                Console.WriteLine("Artifact generator and stored in {0}", path);

                
            }
            catch (Exception ex)
            {
                Console.WriteLine("Generator failed");
                Console.WriteLine(ex.Message);
                Console.ReadLine();
            }
        }
    }
}
