// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Thycotic.MemoryMq.Tests.Collections
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ConcurrentPriorityQueue")]
    public partial class ConcurrentPriorityQueueFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConcurrentPriorityQueue.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ConcurrentPriorityQueue", "In order to avoid silly mistakes\nI want to be sure queue behaves properly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An empty queue should be empty")]
        public virtual void AnEmptyQueueShouldBeEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An empty queue should be empty", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("the scenario integer ConcurrentPriorityQueue ConcurrentPriorityQueueTest should b" +
                    "e empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding to empty queue and then fully emptying it")]
        public virtual void AddingToEmptyQueueAndThenFullyEmptyingIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding to empty queue and then fully emptying it", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("the scenario integer ConcurrentPriorityQueue ConcurrentPriorityQueueTest is empty" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("item 2 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("item 4 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("item 8 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the scenario integer ConcurrentPriorityQueue ConcurrentPriorityQueueTest should b" +
                    "e empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding to empty queue")]
        public virtual void AddingToEmptyQueue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding to empty queue", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("the scenario integer ConcurrentPriorityQueue ConcurrentPriorityQueueTest is empty" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("item 2 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("item 4 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("item 8 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("the string join of scenario integer array ConcurrentPriorityQueueResults should b" +
                    "e \"2 4 8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding to empty queue with priority")]
        public virtual void AddingToEmptyQueueWithPriority()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding to empty queue with priority", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.And("the scenario integer ConcurrentPriorityQueue ConcurrentPriorityQueueTest is empty" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("item 2 is priorty enqueued in the scenario integer ConcurrentPriorityQueue Concur" +
                    "rentPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("item 4 is priorty enqueued in the scenario integer ConcurrentPriorityQueue Concur" +
                    "rentPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("item 8 is priorty enqueued in the scenario integer ConcurrentPriorityQueue Concur" +
                    "rentPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("the string join of scenario integer array ConcurrentPriorityQueueResults should b" +
                    "e \"8 4 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding and removing from queue")]
        public virtual void AddingAndRemovingFromQueue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding and removing from queue", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.And("item 2 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("item 4 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("item 8 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("item is dequeued in the scenario integer ConcurrentPriorityQueue ConcurrentPriori" +
                    "tyQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the string join of scenario integer array ConcurrentPriorityQueueResults should b" +
                    "e \"4 8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding to queue with priority")]
        public virtual void AddingToQueueWithPriority()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding to queue with priority", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.And("item 4 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("item 8 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("item 2 is priorty enqueued in the scenario integer ConcurrentPriorityQueue Concur" +
                    "rentPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the string join of scenario integer array ConcurrentPriorityQueueResults should b" +
                    "e \"2 4 8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Removing from empty queue")]
        public virtual void RemovingFromEmptyQueue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing from empty queue", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("the string join of scenario integer array ConcurrentPriorityQueueResults should b" +
                    "e \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Removing from queue with a single item")]
        public virtual void RemovingFromQueueWithASingleItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing from queue with a single item", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("there exists an integer ConcurrentPriorityQueue stored in the scenario as Concurr" +
                    "entPriorityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.And("item 2 is enqueued in the scenario integer ConcurrentPriorityQueue ConcurrentPrio" +
                    "rityQueueTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("all items are dequeued from scenario integer ConcurrentPriorityQueue ConcurrentPr" +
                    "iorityQueueTest and stored in scenario integer array ConcurrentPriorityQueueResu" +
                    "lts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("the string join of scenario integer array ConcurrentPriorityQueueResults should b" +
                    "e \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
