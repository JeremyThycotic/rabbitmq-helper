using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using Thycotic.InstallerGenerator.Core.MSI.WiX;
using Thycotic.InstallerGenerator.Core.Steps;
using Thycotic.InstallerGenerator.Runbooks.Services.Ingredients;

namespace Thycotic.InstallerGenerator.Runbooks.Services
{
    /// <summary>
    /// Memory Mq pipeline service WiX MSI generator runbook
    /// </summary>
    public class MemoryMqPiplineServiceWiXMsiGeneratorRunbook : WiXMsiGeneratorRunbook
    {
        /// <summary>
        /// The default artifact name
        /// </summary>
        public const string DefaultArtifactName = "Thycotic.MemoryMq.Pipeline.Service";

        /// <summary>
        /// Gets or sets the pipeline settings.
        /// </summary>
        /// <value>
        /// The pipeline settings.
        /// </value>
        public PipelineSettings PipelineSettings { get; set; }

        /// <summary>
        /// Bakes the steps.
        /// </summary>
        /// <exception cref="System.ArgumentException">Pipeline settings ingredients missing</exception>
        public override void BakeSteps()
        {
            if (PipelineSettings == null)
            {
                throw new ArgumentException("Pipeline settings ingredients missing");
            }

            ArtifactName = GetArtifactFileName(DefaultArtifactName, ArtifactNameSuffix, Version);

            Steps = new IInstallerGeneratorStep[]
            {
                new AppSettingConfigurationChangeStep
                {
                    Name = "App.config changes",
                    ConfigurationFilePath =
                        GetPathToFileInSourcePath(string.Format("{0}.exe.config", DefaultArtifactName)),
                    Settings = new Dictionary<string, string>
                    {
                        {"Pipeline.ConnectionString", PipelineSettings.ConnectionString},
                        {"Pipeline.UseSSL", PipelineSettings.UseSsl},
                        {"Pipeline.Thumbprint", PipelineSettings.Thumbprint}
                    }
                },
                new ExternalProcessStep
                {
                    Name = "File harvest (WiX Heat process)",
                    WorkingPath = WorkingPath,
                    ExecutablePath = ToolPaths.GetHeatPath(ApplicationPath),
                    Parameters = string.Format(@"
dir {0}
-nologo
-o output\Autogenerated.wxs 
-ag 
-sfrags 
-suid 
-cg main_component_group 
-t add_service_install.xsl 
-sreg 
-scom 
-srd 
-template fragment 
-dr INSTALLLOCATION", SourcePath)

                },
                new ExternalProcessStep
                {
                    Name = "Compiling (WiX Candle process)",
                    WorkingPath = WorkingPath,
                    ExecutablePath = ToolPaths.GetCandlePath(ApplicationPath),
                    Parameters = string.Format(@"
-nologo 
-ext WixUtilExtension 
-dInstallerVersion={0} 
-out output\
output\AutoGenerated.wxs Product.wxs", Version)
                },
                new ExternalProcessStep
                {
                    Name = "Linking and binding (WiX Light process)",
                    WorkingPath = WorkingPath,
                    ExecutablePath = ToolPaths.GetLightPath(ApplicationPath),
                    Parameters = string.Format(@"
-nologo
-b {0}
-sval 
-ext WixUIExtension 
-ext WixUtilExtension 
-out {1}
output\AutoGenerated.wixobj output\Product.wixobj", SourcePath, ArtifactName)
                }
            };
        }
    }
}
